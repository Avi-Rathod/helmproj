<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="content-type" content="text/html; charset=utf-8">
        <link rel="stylesheet" type="text/css" href="sas.css"/>
        <title>SAS RFC Solution Configuration Patch to Communicate with Apache Kafka</title>
    </head>
    <body>
        <h1 id="140345099728160sas-rfc-solution-configuration-patch-to-communicate-with-apache-kafka">SAS RFC Solution Configuration Patch to Communicate with Apache Kafka</h1>
<h2 id="140345099728160overview">Overview</h2>
<p>The SAS RFC Solution Configuration Service installs three Kubernetes resources that define how Fraud solutions communicate with Apache Kafka.</p>
<ul>
<li>A configmap containing basic properties like the location of the Apache Kafka cluster.</li>
<li>A secret containing the credentials required to communicate with Apache Kafka.</li>
<li>A secret containing the certificate needed for Apache Kafka TLS.</li>
</ul>
<p>This README file describes how to replace the placeholders in the files with values and secret data for a specific Apache Kafka cluster.</p>
<h2 id="140345099728160prerequisites">Prerequisites</h2>
<ul>
<li>SAS RFC Solution Configuration service is deployed in the SAS Viya platform.</li>
<li>You have a running Apache Kafka cluster that Fraud products will use for consuming and producing messages.</li>
</ul>
<h2 id="140345099728160installation">Installation</h2>
<ol>
<li>
<p>Copy all of the files in <code>$deploy/sas-bases/examples/sas-rfc-solution-config/configure-kafka</code> to <code>$deploy/site-config/sas-rfc-solution-config</code>, where $deploy is the directory containing your SAS Viya platform installation files. Create the target directory, if it does not already exist.</p>
</li>
<li>
<p>Edit the <code>$deploy/site-config/sas-rfc-solution-config/kafka-configuration-patch.yaml</code> file. Update properties, especially the server, protocol and topics. Add any properties as  recommended by product documentation or customer support. Here is an example:</p>
<pre class="highlight"><code class="language-yaml">- op: replace
  path: /data
  value:
   SAS_KAFKA_SERVER: "fsi-kafka-kafka-bootstrap.kafka.svc.cluster.local:9093"
   SAS_KAFKA_CONSUMER_DEBUG: ""
   SAS_KAFKA_PRODUCER_DEBUG: ""
   SAS_KAFKA_OFFSET: earliest
   SAS_KAFKA_ACKS: "2"
   SAS_KAFKA_BATCH: ""
   SAS_KAFKA_LINGER: ""
   SAS_KAFKA_AUTO_CREATE_TOPICS: "true"
   SAS_KAFKA_SECURITY_PROTOCOL: "sasl_ssl"
   SAS_KAFKA_HOSTNAME_VERIFICATION: "false"
   SAS_DETECTION_KAFKA_TOPIC: "input-transactions"
   SAS_DETECTION_KAFKA_TDR_TOPIC: "tdr-topic"
   SAS_DETECTION_KAFKA_REJECTTOPIC: "transaction-reject"
   SAS_TRIAGE_KAFKA_TDR_TOPICS: "tdr-topic"
   SAS_TRANSACTION_MARK_TOPIC: "transaction-topic-outbound"
   SAS_RWS_KAFKA_BROKERS: "fsi-kafka-kafka-bootstrap.kafka.svc.cluster.local:9093"
   SAS_RWS_KAFKA_INPUT_TOPIC: "rws-input-transactions"
   SAS_RWS_KAFKA_OUTPUT_TOPIC: "rws-output-transactions"
   SAS_RWS_KAFKA_ERROR_TOPIC: "rws-error-transactions"
   SAS_RWS_KAFKA_REJECT_TOPIC: "rws-reject-transactions"</code></pre>

</li>
<li>
<p>Edit the <code>$deploy/site-config/sas-rfc-solution-config/kafka-cred-patch.yaml</code> file. If the security protocol for Apache Kafka includes SASL, then modify the patch to include a base64 representation of the user ID and password. Here is an example:</p>
<pre class="highlight"><code class="language-yaml">- op: replace
  path: /data
  value:
    username: ...
    password: ...</code></pre>

</li>
<li>
<p>Edit the <code>$deploy/site-config/sas-rfc-solution-config/kafka-truststore-patch.yaml</code> file. If the security protocol for kafka includes SSL, then update the patch to use the correct certificate.  Here is an example:</p>
<pre class="highlight"><code class="language-yaml">- op: replace
  path: /data
  value:
    ca.crt: LS0tLS1CRU...
    ca.p12: MIIGogIBAz...
    ca.password: ...</code></pre>

</li>
<li>
<p>After updating the example files, add references to them to the base kustomization.yaml file (<code>$deploy/kustomization.yaml</code>). Add a reference to the kafka-configuration-patch.yaml file as a patch.</p>
<p>For example, if you made the changes described above, then the base kustomization.yaml file should have entries similar to the following:</p>
<pre class="highlight"><code class="language-yaml">
patches:
- target:
    version: v1
    kind: ConfigMap
    name: sas-rfc-solution-config-kafka-config
  path: site-config/sas-rfc-solution-config/kafka-configuration-patch.yaml
- target:
    version: v1
    kind: Secret
    name: sas-rfc-solution-config-kafka-creds
  path: site-config/sas-rfc-solution-config/kafka-cred-patch.yaml
- target:
    version: v1
    kind: Secret
    name: sas-rfc-solution-config-kafka-ca-cert
  path: site-config/sas-rfc-solution-config/kafka-truststore-patch.yaml</code></pre>

</li>
<li>
<p>As an administrator with cluster permissions, apply the edited files to your deployment by performing the steps described in <a href="https://documentation.sas.com/?cdcId=itopscdc&amp;cdcVersion=default&amp;docsetId=dplyml0phy0dkr&amp;docsetTarget=p127f6y30iimr6n17x2xe9vlt54q.htm">Deploy the Software</a>.</p>
</li>
</ol>
    </body>
</html>